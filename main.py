import logging
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from telegram.ext import CommandHandler
import sqlite3 as sql
from config import BOT_TOKEN
import pec_api
import geocoder_api


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)


# –°—Ü–µ–Ω–∞—Ä–∏–π –¥–∏–∞–ª–æ–≥–∞
async def start(update, context):
    con = sql.connect('users.db')
    cur = con.cursor()
    context.user_data.clear()
    user = update.effective_user
    user_db = cur.execute("SELECT * FROM users WHERE tg_id == ?", (user.id,)).fetchall()
    if not user_db:
        cur.execute('INSERT INTO users (tg_id, feadback) VALUES (?, ?)', (user.id, 0))
        con.commit()
        cur.close()
        con.close()
    reply_keyboard = [['üßÆ–°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏', 'üìà–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞']]
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! \n"
        "\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ \n"
        "—Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é\n"
        "–í –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n"
        "\n"
        "‚¨á", reply_markup=markup)
    return 1


async def chosen_option(update, context):
    msg = update.message.text
    if msg[1:].lower() == '—Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏':
        await update.message.reply_html(
            f"üåè –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.\n"
            "–ü–æ–∂–∞–ª–π—É—Å—Ç–∞, –ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞‚ùó")
        return 2
    elif msg[1:].lower() == '–æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞':
        con = sql.connect('../calculator_deliver/users.db')
        cur = con.cursor()
        rate_sum = 0
        rated_users = 0
        user_db = cur.execute("SELECT * FROM users").fetchall()
        print(user_db)
        for el in user_db:
            if el[1]:
                rate_sum += el[1]
                rated_users += 1
        con.commit()
        cur.close()
        con.close()
        if rated_users == 0:
            await update.message.reply_html(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10')
        else:
            await update.message.reply_html(f'–ù–∞—à–∏–º –±–æ—Ç–æ–º —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å {len(user_db)} —á–µ–ª–æ–≤–µ–∫! üòé\n'
                                            f'üåü –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {round(rate_sum / rated_users, 2)}\n'
                                            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10')
        return 10
    else:
        reply_keyboard = [['üßÆ–°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏', 'üìà–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞']]
        markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        await update.message.reply_html('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é...', reply_markup=markup)
        return 1


async def choose_city_from(update, context):
    msg = update.message.text
    city_from = geocoder_api.get_city_name(msg.lower())
    if not city_from:
        await not_understand(update, context)
    else:
        context.user_data['city_from'] = city_from
        print(city_from)
        await context.bot.send_message(chat_id=update.effective_user.id,
                                           text=f"üåè–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.\n"
                                            "–ü–æ–∂–∞–ª–π—É—Å—Ç–∞, –ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞‚ùó")
        return 3


async def choose_city_to(update, context):

    msg = update.message.text
    try:
        city_to = geocoder_api.get_city_name(msg.lower())
        context.user_data['city_to'] = city_to
        await context.bot.send_message(chat_id=update.effective_user.id,
                                           text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∏—Ç—å"
                                           )
        return 4
    except geocoder_api.CityNotFoundError:
        await not_understand(update, context)


async def read_places(update, context):
    msg = update.message.text
    try:
        places = int(msg)
        context.user_data['places'] = places
        await update.message.reply_html(
            f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–≥ –Ω–∞ –æ–¥–Ω–æ –º–µ—Å—Ç–æ "
        )
        return 5

    except ValueError:
        await not_understand(update, context)


async def read_weight(update, context):
    msg = update.message.text
    try:
        weight = float(msg)
        context.user_data['weight'] = weight
        reply_keyboard = [[InlineKeyboardButton('–º–º', callback_data='#units_mm'),
                           InlineKeyboardButton('—Å–º', callback_data='#units_sm'),
                           InlineKeyboardButton('–º–µ—Ç—Ä', callback_data='#units_m')]]
        markup = InlineKeyboardMarkup(reply_keyboard)
        await context.bot.send_message(chat_id=update.effective_user.id,
                                       text=f"–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä—É–∑–∞ (–æ–¥–Ω–æ –º–µ—Å—Ç–æ)",
                                       reply_markup=markup)
        return 6
    except ValueError:
        await not_understand(update, context)


async def read_units(update, context):
    query = update.callback_query
    if query.data[7:] == 'mm':
        context.user_data['volume_coef'] = 0.001
    elif query.data[7:] == 'sm':
        context.user_data['volume_coef'] = 0.01
    elif query.data[7:] == 'm':
        context.user_data['volume_coef'] = 1
    await context.bot.send_message(chat_id=update.effective_user.id,
                                   text=f"–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É, –¥–ª–∏–Ω—É, –≤—ã—Å–æ—Ç—É –≥—Ä—É–∑–∞ (–Ω–∞ –æ–¥–Ω–æ –º–µ—Å—Ç–æ) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n\n–ü—Ä–∏–º–µ—Ä:\n20 30 50")
    return 7


async def read_sizes(update, context):
    try:
        msg = update.message.text
        width, long, height = map(lambda x: float(x) * context.user_data['volume_coef'], msg.split(' '))
        context.user_data['sizes'] = [width, height, long]
        reply_keyboard = [[InlineKeyboardButton('–¥–∞', callback_data='#gabarit_yes'),
                           InlineKeyboardButton('–Ω–µ—Ç', callback_data='#gabarit_no')]]
        markup = InlineKeyboardMarkup(reply_keyboard)
        await update.message.reply_html(f"–í–∞—à–µ–º—É –≥—Ä—É–∑—É –Ω—É–∂–Ω–∞ –∑–∞—â–∏—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞?", reply_markup=markup)
        return 8
    except Exception:
        await not_understand(update, context)


async def ztu(update, context):
    query = update.callback_query
    if query.data[9:] == 'yes':
        context.user_data['ztu'] = True
    elif query.data[9:] == 'no':
        context.user_data['ztu'] = False
    reply_keyboard = [[InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É, –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É', callback_data='#deliv_dd')],
                      [InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–¥–µ–ª–µ–Ω–∏—è, –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ', callback_data='#deliv_pp')],
                      [InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É, –¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ', callback_data='#deliv_dp')],
                      [InlineKeyboardButton('–ó–∞–±—Ä–∞—Ç—å –∏–∑ –æ—Ç–¥–µ–ª–µ–Ω–∏—è, –¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É', callback_data='#deliv_pd')]]
    markup = InlineKeyboardMarkup(reply_keyboard)
    await context.bot.send_message(chat_id=update.effective_user.id,
                                   text=f"–í–≤–µ–¥–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä—É–∑–∞ (–æ–¥–Ω–æ –º–µ—Å—Ç–æ)",
                                   reply_markup=markup)
    return 9


async def delivery(update, context):
    query = update.callback_query
    home_take = True
    home_delive = True
    if query.data[7] == 'p':
        home_take = False
    if query.data[8] == 'p':
        home_delive = False
    context.user_data['home_take'] = home_take
    context.user_data['home_delive'] = home_delive
    await calculate(update, context)


# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pec_api
async def calculate(update, context):
    city_from = ' '.join(context.user_data['city_from'].split('_'))
    city_to = ' '.join(context.user_data['city_to'].split('_'))
    places = context.user_data['places']
    weight = context.user_data['weight']
    width, long, height = context.user_data['sizes']
    ztu = context.user_data['ztu']
    home_take = context.user_data["home_take"]
    home_delive = context.user_data["home_delive"]
    text1 = f'–†–∞—Å—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ {city_from} - {city_to}\n' \
            f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:\n' \
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {places}\n' \
            f'–û–±—ä–µ–º –Ω–∞ –º–µ—Å—Ç–æ: {round(width * long * height, 5)} –º3\n' \
            f'–í–µ—Å –Ω–∞ –º–µ—Å—Ç–æ: {weight} –∫–≥\n' \
            f'–ó–∞—â–∏—Ç–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞: {"–≤–∫–ª—é—á–µ–Ω–∞" if ztu else "–Ω–µ –≤–∫–ª—é—á–µ–Ω–∞"}\n' \
            f'–ó–∞–±—Ä–∞—Ç—å {"–ø–æ –∞–¥—Ä–µ—Å—É" if home_take else "–∏–∑ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"}\n' \
            f'–î–æ—Å—Ç–∞–≤–∏—Ç—å {"–ø–æ –∞–¥—Ä–µ—Å—É" if home_delive else "–≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ"}\n' \
            f'----------------------------------------------\n'
    await context.bot.send_message(chat_id=update.effective_user.id,
                                   text=text1)
    try:
        info = pec_api.get_info_delivery(city_from=city_from, city_to=city_to,
                                         weight=weight, width=width, long=long, height=height,
                                         volume=width * long * height, is_negabarit=0, need_protected_package=ztu,
                                         places=places)
        auto_enabled = False
        auto_cost = 0
        add_list = ['ADD', 'ADD_1', 'ADD_2', 'ADD_3', 'ADD_4']
        if 'auto' in info.keys():
            auto_enabled = True
            auto_cost = int(info['auto'][2])
            if home_take:
                auto_cost += int(info['take'][2])
            if home_delive:
                auto_cost += int(info['deliver'][2])
            if 'autonegabarit' in info.keys():
                auto_cost += int(info['autonegabarit'][2])
            for i in add_list:
                if i in info.keys():
                    auto_cost += int(info[i]['3'])
        auto_time = '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
        if 'periods_days' in info.keys():
            auto_time = info['periods_days']
        text2 = f'–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: –ü–≠–ö:\n' \
                f'–ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∞: {"–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" if not auto_enabled else str(auto_cost) + f"—Ä; —Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö:"} {auto_time}'
        await context.bot.send_message(chat_id=update.effective_user.id,
                                       text=text2)
        return ConversationHandler.END
    except pec_api.NoDeliveryToThisCity as err:
        await context.bot.send_message(chat_id=update.effective_user.id,
                                       text=f'{str(err)}')


async def stop(update, context):
    await update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def feedback(update, context):
    user = update.effective_user
    con = sql.connect('../calculator_deliver/users.db')
    cur = con.cursor()
    try:
        msg = int(update.message.text)
        if msg >= 0 and msg <= 10:
            reply_keyboard = [['–°—Ä–∞–≤–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏', '–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞']]
            markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
            cur.execute('UPDATE users SET feadback = ? WHERE tg_id = ?', (msg, user.id))
            con.commit()
            cur.close()
            con.close()
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=markup)
            return 1
        else:

            await update.message.reply_text("–Ø —É–º–µ—é —Å—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç 0 –¥–æ 10")
    except Exception as ex:
        await not_understand(update, context)


async def help(update, context):
    await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–ø–∏—à–∏ /start\n"
                                    "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–∏—à–∏ /stop –∏ /start")


async def not_understand(update, context):
    await context.bot.send_message(chat_id=update.effective_user.id,
                                   text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞..–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n'
                                        '–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /stop, –∞ –ø–æ—Å–ª–µ /start')


def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],

        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, chosen_option)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_city_from)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_city_to)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, read_places)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, read_weight)],
            6: [CallbackQueryHandler(read_units, pattern='^' + '#units_')],
            7: [MessageHandler(filters.TEXT & ~filters.COMMAND, read_sizes)],
            8: [CallbackQueryHandler(ztu, pattern='^' + '#gabarit_')],
            9: [CallbackQueryHandler(delivery, pattern='^' + '#deliv_')],
            10: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback)]
        },

        fallbacks=[CommandHandler('stop', stop)]
    )

    application.add_handler(CommandHandler("help", help))
    application.add_handler(conv_handler)

    application.run_polling()


if __name__ == '__main__':
    main()